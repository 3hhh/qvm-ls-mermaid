#!/bin/bash
#
#See usage().
#
#Copyright (C) 2021  David Hobach  GPLv3
#version: 0.8
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <https://www.gnu.org/licenses/>.
#

#init blib
source blib
b_checkVersion 1 3 || { >&2 echo "This script depends on blib (https://github.com/3hhh/blib) version 1.3 or higher. Please install a supported version." ; exit 1 ; }
eval "$B_SCRIPT"
b_import "args"
b_import "str"
b_import "os/qubes4/dom0"

#distinguish the B_E exit code from the "normal" error
B_RC=6

#path to the prune-policy-graph script
PRUNE_SCRIPT="$B_SCRIPT_DIR/prune-policy-graph"

#input qvm-ls & RPC call
QVM_LS="qvm-ls --raw-data -O name,CLASS,label,netvm,provides_network,template,template_for_dispvms,virt_mode"
printf -v RPC_LS 'qrexec-policy-graph --include-ask | %q' "$PRUNE_SCRIPT"
IN_CALL="( $QVM_LS && $RPC_LS )"

#full path to the default output directory
OUT_DEFAULT="/tmp/qvm-ls-mermaid"

#directory to be transferred to the target VM
VM_DIR="$B_SCRIPT_DIR/mermaid"

#name of the main output file
MERMAID_OUT="qvm-ls-mermaid.js"

#global variables for getGroupId()
declare -gA ID_GROUPS=() #group --> ID
declare -gA ID_LAST=() #prefix --> last used counter

function usage {
echo "
Usage: $B_SCRIPT_NAME [options] [out vm] [out dir]

Generate a mermaid-js flow chart from the Qubes OS network topology,
store and display it inside a VM.

mermaid-js: https://mermaid-js.github.io/

[out vm]:
  Name of the VM where the chart is meant to be stored. If this is
  set to dom0, the output is printed to the dom0 stdout.
  Default: Fresh disposable VM.

[out dir]:
  Full path to the directory inside [out vm] where to store the
  chart. If this directory already contains existing files, only
  $MERMAID_OUT is written and related details (-D) are updated.
  Otherwise the directory is filled with files that are necessary
  to view the chart inside a browser.
  Default: $OUT_DEFAULT

[options]:
  -r
    Read the qvm-ls output from stdin rather than generating it
    internally. This is useful for pre-filtering with e.g. grep or
    sed.
    Required format:
    $IN_CALL

  --orient [TB|BT|RL|LR]
    Orientation of the resulting graph. Default: TB (top to bottom)

  -R
    Include RPC policy data from qrexec-policy-graph.
    Generating a policy graph suitable for viewing may take several
    minutes.

  -n
    Filter out all nodes without edges from the result.

  -t
    Include template information in the output.

  -T
    Include template relationships as dotted edges in the output.

  -v
    Include the virtualization mode in the output.

  -D
    Add detail pages to nodes that are opened on click. Regular nodes
    currently link to their preferences and firewall rules; VM and
    policy groups link to their contained elements.
    Detail pages can be customized with e.g. notes or other content.
    Further runs of this script will only update the detail sections.

  -w
    Use arrows without direction.

  -f
    Force re-writing the [out dir] and ignore existing files.
    Detail pages are not necessarily overwritten.

  --browser [browser]
    Use the given browser to display the chart (default: xdg-open).
"
exit 1
}

#getOrientation
#Retrieve the output orientation, if and only if the user specified a valid one.
#returns: Output orientation.
#@B_E
function getOrientation {
local ret=
ret="$(b_args_getOption "--orient" "TB")"

if [[ "$ret" == "TB" ]] || [[ "$ret" == "BT" ]] || [[ "$ret" == "RL" ]] || [[ "$ret" == "LR" ]] ; then
  echo "$ret"
else
  B_ERR="Invalid orientation: $ret"
  B_E
fi
}

#getMermaidId [name]
#Generate a mermaid ID from the given VM name.
#returns: An ID that should be accepted by mermaid-js.
function getMermaidId {
local name="$1"

#mermaid-js doesn't like the word "default" in any ID --> replace it
name="${name//default/Default}"

#mermaid-js doesn't like the @ sign --> remove it
name="${name//@/}"

#mermaid-js doesn't like spaces --> replace them with underscores
name="${name// /_}"

echo "$name"
}

#getMermaidOut
#Get the mermaid output. Input is read from stdin.
#returns: The mermaid-js output.
#@B_E
function getMermaidOut {
#print header
local orient=
orient="$(getOrientation)" || { B_ERR="Invalid orientation specified." ; B_E }
echo "graph $orient"
echo ""

local filterNoEdges=1
b_args_getOption "-n" > /dev/null && filterNoEdges=0

local includeRpc=1
b_args_getOption "-R" > /dev/null && includeRpc=0

local includeTemplate=1
b_args_getOption "-t" > /dev/null && includeTemplate=0

local includeTemplateRels=1
b_args_getOption "-T" > /dev/null && includeTemplateRels=0

local includeVirt=1
b_args_getOption "-v" > /dev/null && includeVirt=0

local thinArrow="-->"
local thickArrow="==>"
local dottedArrow="-.->"
b_args_getOption "-w" > /dev/null && thinArrow="---" && thickArrow="===" && dottedArrow="-.-"

local includeDetails=1
b_args_getOption "-D" > /dev/null && includeDetails=0

declare -A nodes=() #node mermaid ID --> its mermaid-js implementation
declare -A nodeHasEdge=() #node mermaid ID --> whether it is connected to an edge
local edges=""
local line name class label netvm providesNetwork template dispTemplate virtMode id details impl fw
local inRpc=1 #whether or not we're currently parsing qrexec-policy-graph output
while IFS= read -r line ; do
  [ -z "$line" ] && continue

  #detect the start and end of qrexec-policy-graph output
  [[ "$line" == "digraph "* ]] && [ $inRpc -ne 0 ] && inRpc=0 && continue
  [[ "$line" == "}" ]] && [ $inRpc -eq 0 ] && inRpc=1 && continue

  #parse
  if [ $inRpc -ne 0 ] ; then
    #qvm-ls output

    IFS='|' read -r name class label netvm providesNetwork template dispTemplate virtMode <<< "$line"
    [[ "$name" == "disp"* ]] && continue #always ignore disposable VM instances

    #define node
    id="$(getMermaidId "$name")"
    impl="$id($name)"
    impl="$impl"$'\n'"class $id class_$class;"
    impl="$impl"$'\n'"class $id label_$label;"
    [[ "$dispTemplate" == "True" ]] && impl="$impl"$'\n'"class $id dispTemplate;"
    [ $includeVirt -eq 0 ] && impl="$impl"$'\n'"class $id virt_mode_$virtMode;"
    if [ "$template" != "-" ] ; then
      [ $includeTemplate -eq 0 ] && impl="$impl"$'\n'"class $id template_$template;"
      if [ $includeTemplateRels -eq 0 ] ; then
        local tid="$(getMermaidId "$template")"
        edges="$edges"$'\n'"$tid $dottedArrow $id"
        nodeHasEdge["$id"]=0
        nodeHasEdge["$tid"]=0
      fi
    fi

    if [ $includeDetails -eq 0 ] ; then
      impl="$impl"$'\n'"click $id \"./details/$id.html\" _blank"
      if [[ "$name" != "dom0" ]] ; then
        if details="$(qvm-prefs "$name")" ; then
          details="<h3>Preferences</h3>"$'\n'"<pre>"$'\n'"$details"$'\n'"</pre>"
          fw="$(qvm-firewall --raw "$name")" && details="$details"$'\n'$'\n'"<h3>Firewall</h3>"$'\n'"<pre>"$'\n'"$fw"$'\n'"</pre>"
          details="<div id=\"details_$id\">"$'\n'"$details"$'\n'"</div>"
        fi
      else
        details="<div id=\"details_$id\">"$'\n'"$(qubes-prefs)"$'\n'"</div>"
      fi

      details="$(b_str_prefixLines "$details" "%% ")"
      impl="$impl"$'\n'"$details"
    fi
    nodes["$id"]="$impl"

    #define edges
    if [[ "$netvm" != "-" ]] ; then
      local nid="$(getMermaidId "$netvm")"
      edges="$edges"$'\n'"$id $thickArrow $nid"
      nodeHasEdge["$id"]=0
      nodeHasEdge["$nid"]=0
    fi
  else
    #qrexec-policy-graph output
    [ $includeRpc -ne 0 ] && continue

    #skip non-edge lines (prune-policy-graph adds node lines that we don't need)
    [[ "$line" != *" -> "* ]] && continue

    #line format:
    #"[source]" -> "[target]" [label="[policy]" color=red];
    #[source]: a fully qualified VM name _or_ a comma-separated list of VM names
    #[target]: may represent a group of VMs, e.g. @dispvm:[template] and/or contain a comma-separated list of such names
    #[policy]: name of a single policy _or_ list of escaped comma-separated policies, e.g. \"qubes.SyncAppMenus\"', '\"qubes.ReceiveUpdates\"', ...
    local re='^[ ]*"?([^ "]+)"? -> "?([^ "]+)"? .*label="\[([^]]+)\]".*$'

    [[ "$line" =~ $re ]] || { B_ERR="Unexpected line during qrexec-policy-graph parsing: $line" ; B_E }
    local src="${BASH_REMATCH[1]}"
    local target="${BASH_REMATCH[2]}"
    local policy="${BASH_REMATCH[3]}"

    #create group nodes, if necessary
    local gname=
    if src="$(rpc_parseNodes "$src")" ; then
      getGroupId "gname" "$src" "VM Group" && nodes["$(getMermaidId "$gname")"]="$(createGroupNode "$gname" "$src" 0 "$includeDetails")"
      src="$gname"
    fi
    if target="$(rpc_parseNodes "$target")" ; then
      getGroupId "gname" "$target" "VM Group" && nodes["$(getMermaidId "$gname")"]="$(createGroupNode "$gname" "$target" 0 "$includeDetails")"
      target="$gname"
    fi
    if policy="$(rpc_parsePolicies "$policy" | sort)" ; then
      getGroupId "gname" "$policy" "Policy Group" && nodes["$(getMermaidId "$gname")"]="$(createGroupNode "$gname" "$policy" 1 "$includeDetails")"

      #special case: we created a dedicated policy node and now need edges from src --> policy --> target
      #we create the policy --> target edge and leave the rest to the remaining code
      local sid="$(getMermaidId "$src")"
      local pid="$(getMermaidId "$gname")"
      local tid="$(getMermaidId "$target")"
      edges="$edges"$'\n'"$pid $thinArrow|$sid|$tid"
      nodeHasEdge["$sid"]=0
      nodeHasEdge["$pid"]=0
      nodeHasEdge["$tid"]=0
      target="$gname"
      policy=""
    fi

    local sid="$(getMermaidId "$src")"
    local tid="$(getMermaidId "$target")"

    [ -n "$policy" ] && edges="$edges"$'\n'"$sid $thinArrow|$policy|$tid" || edges="$edges"$'\n'"$sid $thinArrow $tid"
    nodeHasEdge["$sid"]=0
    nodeHasEdge["$tid"]=0
  fi
done

echo "%% nodes %%"
local node id
local ids=""
#first sort to make the result more reproducible for RCS etc., then print
for id in "${!nodes[@]}" ; do
  if [ $filterNoEdges -ne 0 ] || [ ${nodeHasEdge["$id"]+exists} ] ; then
    ids="$ids"$'\n'"$id"
  fi
done
ids="$(sort <<< "$ids")"
while IFS= read -r id ; do
    [ -z "$id" ] && continue
    echo ""
    echo "${nodes["$id"]}"
done <<< "$ids"

echo ""
echo "%% edges %%"
edges="$(sort <<< "$edges")"
echo "$edges"
}

#getGroupId [ret] [group] [prefix]
#Obtain a group ID for the given group. For existing groups the existing ID is returned. For new groups a new group is alloced.
#[ret]: Name of the return variable to write the group ID to.
#[group]: Newline-separated list of nodes to obtain the group ID for.
#[prefix]: String to represent the group.
#returns: Nothing. Sets a zero exit code, if a new group had to be created and a non-zero exit code for existing groups.
#@B_E
#@StateChanging
function getGroupId {
local _ret="$1"
local group="$2"
local prefix="$3"

if [ ${ID_GROUPS["$group"]+exists} ] ; then
  eval $_ret="'${ID_GROUPS["$group"]}'"
  return 2
else
  local cnt="${ID_LAST["$prefix"]:-0}"
  (( cnt++ ))
  ID_LAST["$prefix"]="$cnt"
  ID_GROUPS["$group"]="$prefix $cnt"
  eval $_ret="'$prefix $cnt'"
  return 0
fi
}

#createGroupNode [group node name] [input nodes] [node type] [include details]
#Create a group node, i.e. a node representing multiple others.
#[group node]: Name of the group node to create.
#[input nodes]: Newline-separated list of nodes to merge.
#[node type]: 0=VM (default), 1=policy
#[include details]: Whether or not to include the group details in the output (default: 0).
#returns: The mermaid-js string representing the new node group.
function createGroupNode {
local groupNode="$1"
local inputNodes="$2"
local type="$3"
local includeDetails="${4:-0}"

local nodeFmt='%s(%s)'
[ $type -ne 0 ] && nodeFmt='%s>%s]' #special shape for policy nodes

local gid="$(getMermaidId "$groupNode")"
printf "$nodeFmt" "$gid" "$groupNode"
echo ""
[ $type -eq 0 ] && echo "class $gid group_vms" || echo "class $gid group_policies"
if [ $includeDetails -eq 0 ] ; then
  echo "click $gid \"./details/$gid.html\" _blank"
  echo "%% <div id=\"details_$gid\">"
  echo "%% <pre>"
  b_str_prefixLines "$inputNodes" "%% "
  echo "%% </pre>"
  echo "%% </div>"
fi

return 0
}

#rpc_parseNodes [str]
#Parse the list of nodes from the given string in prune-policy-graph format.
#returns: Newline-separated list of nodes. Sets a zero exit code, if and only if more than one node was found.
#@B_E
function rpc_parseNodes {
local str="$1"

local IFS=","
read -ra arr <<< "$str"

local node=
for node in "${arr[@]}" ; do
  echo "$node"
done

[ ${#arr[@]} -gt 1 ]
}

#rpc_parsePolicies [str]
#Parse the list of policies from the given string in prune-policy-graph format.
#returns: Newline-separated list of policies. Sets a zero exit code, if and only if more than one policy was found.
#@B_E
function rpc_parsePolicies {
local str="$1"

local IFS='\'
read -ra arr <<< "$str"
local token=
local re='^"([a-zA-Z\.:_\-]+)$'
local cnt=0
for token in "${arr[@]}" ; do
  [[ "$token" =~ $re ]] && echo "${BASH_REMATCH[1]}" && (( cnt++ ))
done

[ $cnt -gt 1 ]
}

#vm_moveAndDisplay [src dir] [target dir] [mermaid file] [browser] [force]
#Display the graph. This function is run inside the VM only.
#[src dir]: From where to move the data.
#[target dir]: Where to find the data.
#[mermaid file]: Name of the mermaid file.
#[browser]: The browser to use.
#[force]: If set to 0, forcefully overwrite existing data (default: 1).
#returns: A nonzero-exit code on issues.
#@B_E
function vm_moveAndDisplay {
local srcDir="$1"
local targetDir="$2"
local mfile="$3"
local browser="$4"
local force="${5:-1}"

set -e -o pipefail

mkdir -p "$targetDir"

#check whether the target dir already has data
local cnt=
[ $force -eq 0 ] && cnt=1 || cnt="$(find "$targetDir" | wc -l)"
if [ $cnt -eq 1 ] ; then
  #no data --> copy all input
  mv "$srcDir"/* "$targetDir"
else
  #has data --> copy mermaid file only
  mv "$srcDir/$mfile" "$targetDir"
fi

#cleanup
rm -rf "$srcDir"

#display
cd "$targetDir"
./run "$browser"
}

function main {
b_deps "qvm-ls" "cat" "sort" "qvm-prefs" "qvm-firewall" "qubes-prefs" "qvm-copy-to-vm" "qrexec-policy-graph"
b_dom0_setVMDeps "find"$'\n'"wc"$'\n'"mv"$'\n'"mkdir"

b_args_init 1 "-r" 0 "--orient" 1 "-n" 0 "-R" 0 "-t" 0 "-T" 0 "-v" 0 "-D" 0 "-w" 0 "-f" 0 "--browser" 1
b_args_parse "$@"
if [ $(b_args_getCount) -gt 2 ] || [[ "$(b_args_get 0)" == "help" ]] ; then
  usage
fi

local outVM="$(b_args_get 0)"
local outDir="$(b_args_get 1 "$OUT_DEFAULT")"

local cmd=
if b_args_getOption "-r" > /dev/null ; then
  cmd="cat -"
else
  b_args_getOption "-R" > /dev/null && cmd="$IN_CALL" || cmd="$QVM_LS"
fi

local mermaid=
mermaid="$(set -o pipefail ; eval "$cmd" | getMermaidOut)"
[ $? -ne 0 ] && B_ERR="Failed to generate the mermaid output." && B_E

#sepcial case: print to dom0 stdout
if [[ "$outVM" == "dom0" ]] ; then
  echo "$mermaid"
  return 0
fi

local browser="$(b_args_getOption "--browser")"
local force=1
b_args_getOption "-f" > /dev/null && force=0

b_info "Generated the mermaid output. Ensuring that the ${outVM:-"disposable"} target VM is running..."
if [ -z "$outVM" ] ; then
  outVM="$(b_dom0_startDispVM)" || { B_ERR="Failed to start a disposable VM." ; B_E }
else
  b_dom0_ensureRunning "$outVM"
fi

b_info "Transferring the data to the $outVM VM..."
local ofile="$VM_DIR/$MERMAID_OUT"
echo "$mermaid" > "$ofile" || { B_ERR="Failed to write to $ofile." ; B_E }
qvm-copy-to-vm "$outVM" "$VM_DIR" || { B_ERR="Failed to copy the data." ; B_E }

b_info "Moving and displaying the graph inside the $outVM VM..."
local vmUser=
vmUser="$(qvm-prefs "$outVM" "default_user")" || { B_ERR="Failed to identify the default_user for the $outVM VM." ; B_E }
local srcDir="/home/$vmUser/QubesIncoming/dom0/${VM_DIR##*/}"
b_dom0_execFuncIn "$outVM" "$vmUser" "vm_moveAndDisplay" - - "$srcDir" "$outDir" "$MERMAID_OUT" "$browser" "$force" > /dev/null || { B_ERR="Failed to display the graph inside the $outVM VM." ; B_E }

echo ""
b_info "All done."
}

main "$@"
